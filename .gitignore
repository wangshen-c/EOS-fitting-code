import numpy
from scipy.misc import derivative
from sklearn.linear_model import LinearRegression
from openpyxl import load_workbook
from openpyxl import Workbook
import math
from sympy import *

#定义E-V曲线数组
x=numpy.zeros((6,1))
y=numpy.zeros(6)
V=numpy.zeros((6,3))
E=numpy.zeros(6)

#从表单中读取E-V数据
book=load_workbook('example.xlsx')
sheet=book['E-V']
for i in range(6):
    x[i,0]=sheet.cell(i+1,1).value
    y[i]=sheet.cell(i+1,2).value

#将表单数据转换为多项式
for i in range(6):
    E[i]=y[i]
    V[i,0]=x[i,0]**(-2/3)
    V[i,1]=x[i,0]**(-4/3)
    V[i,2]=x[i,0]**(-2)

#拟合E-V曲线
LR=LinearRegression().fit(V,E)
print(LR.coef_)
print(LR.intercept_)

#存入系数
a=LR.intercept_
b=LR.coef_[0]
c=LR.coef_[1]
d=LR.coef_[2]

#拟合E-V曲线
def E(V):
    return a+b*V**(-2/3)+c*V**(-4/3)+d*V**(-2)

#定义体积模量
def B(V):
    V0=x.min()
    return V*derivative(E,x0=V0,dx=1e-6)

#定义德拜温度
def theta(V):
    return 6.62e-34(6*numpy.pi**2*V**(-1/2))**(-1/3)*(B(V))**(1/2)

#计算振动吉布斯自由能
def vib(V,T):
    return T*(9/8*theta(V)/T+3*math.ln(1-math.e**(-theta(V)/T)))

#定义吉布斯函数
def G(V,T):
    return E(V)+vib(V,T)

#自由能对体积求一阶偏导数
V=symbols('V')
T=symbols('T')
d1=diff(G,V)

#自由能对体积求二阶偏导数
d2=diff(d1,V)

#计算体积模量
def B(V,T):
   return V*d2

#不同温度下的弹性模量存入数组
B=numpy.zeros(10)
V0=x.min()
for i in range(10):
    T=i*100
    B[i]=B(V0,T)

#将数组导出excel表格
sheet=Workbook().active
for i in range(10):
    sheet.cell(i+1,1).value=100*i
    sheet.cell(i+1,2).value=B[i]

#保存表单
sheet.save('B-T曲线')

